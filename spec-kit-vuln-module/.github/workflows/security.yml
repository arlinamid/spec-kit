name: Multi-Language Security
on:
  pull_request:
  push:
    branches: [ main ]
permissions:
  contents: read
  security-events: write
jobs:
  language-detection:
    name: Language Detection
    runs-on: ubuntu-latest
    outputs:
      languages: ${{ steps.detect.outputs.languages }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install pyyaml
      - name: Detect languages
        id: detect
        run: |
          python3 scripts/vuln_audit/language_detector.py --output artifacts/language_detection.json
          LANGUAGES=$(python3 -c "import json; data=json.load(open('artifacts/language_detection.json')); print(' '.join(data['project_info']['languages_detected']))")
          echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
          echo "Detected languages: $LANGUAGES"
      - name: Upload language detection
        uses: actions/upload-artifact@v4
        with:
          name: language-detection
          path: artifacts/language_detection.json

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: language-detection
    if: needs.language-detection.outputs.languages != ''
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript', 'go', 'java', 'csharp', 'cpp', 'c']
    steps:
      - uses: actions/checkout@v4
      - name: Check if language is detected
        id: check-lang
        run: |
          if echo "${{ needs.language-detection.outputs.languages }}" | grep -q "${{ matrix.language }}"; then
            echo "detected=true" >> $GITHUB_OUTPUT
          else
            echo "detected=false" >> $GITHUB_OUTPUT
          fi
      - name: Initialize CodeQL
        if: steps.check-lang.outputs.detected == 'true'
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
      - name: Autobuild
        if: steps.check-lang.outputs.detected == 'true'
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        if: steps.check-lang.outputs.detected == 'true'
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  universal-scans:
    name: Universal Security Scans
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install universal tools
        run: |
          # Install Gitleaks
          curl -s https://raw.githubusercontent.com/gitleaks/gitleaks/master/install.sh | bash
          sudo mv gitleaks /usr/local/bin/
          
          # Install Semgrep
          curl -sL https://github.com/returntocorp/semgrep/releases/latest/download/semgrep-linux-amd64 -o /usr/local/bin/semgrep
          chmod +x /usr/local/bin/semgrep
          
          # Install Trivy
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          
          # Install Syft
          curl -sL https://github.com/anchore/syft/releases/latest/download/syft_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m).tar.gz | tar -xz
          sudo mv syft /usr/local/bin/
      - name: Run universal scans
        run: |
          mkdir -p artifacts
          # Gitleaks
          gitleaks detect --source . --report-format sarif --report-path artifacts/gitleaks.sarif || true
          # Semgrep
          semgrep scan --config=auto --error --sarif --output artifacts/semgrep-universal.sarif || true
          # Trivy
          trivy fs --security-checks vuln,config,secret --format sarif --output artifacts/trivy-fs.sarif . || true
          # Syft
          syft packages dir:. -o cyclonedx-json > artifacts/sbom.cdx.json || true
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: artifacts

  language-specific-scans:
    name: Language-Specific Security Scans
    runs-on: ubuntu-latest
    needs: language-detection
    if: needs.language-detection.outputs.languages != ''
    strategy:
      fail-fast: false
      matrix:
        language: ['python', 'javascript', 'typescript', 'go', 'rust', 'java', 'csharp', 'cpp', 'c', 'php', 'ruby', 'shell', 'powershell', 'yaml', 'dockerfile']
    steps:
      - uses: actions/checkout@v4
      - name: Check if language is detected
        id: check-lang
        run: |
          if echo "${{ needs.language-detection.outputs.languages }}" | grep -q "${{ matrix.language }}"; then
            echo "detected=true" >> $GITHUB_OUTPUT
          else
            echo "detected=false" >> $GITHUB_OUTPUT
          fi
      - name: Setup language environment
        if: steps.check-lang.outputs.detected == 'true'
        run: |
          case "${{ matrix.language }}" in
            python)
              pip install bandit pip-audit safety
              ;;
            javascript|typescript)
              npm install -g audit-ci
              ;;
            go)
              go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
              go install golang.org/x/vuln/cmd/govulncheck@latest
              ;;
            rust)
              cargo install cargo-audit cargo-deny
              ;;
            java)
              # Install SpotBugs, OWASP Dependency Check
              wget https://github.com/spotbugs/spotbugs/releases/latest/download/spotbugs.zip
              unzip spotbugs.zip
              ;;
            csharp)
              # Install Security Code Scan
              dotnet tool install --global security-scan
              ;;
            cpp|c)
              sudo apt-get update && sudo apt-get install -y cppcheck
              pip install flawfinder
              ;;
            php)
              composer global require squizlabs/php_codesniffer
              ;;
            ruby)
              gem install brakeman bundler-audit
              ;;
            shell)
              sudo apt-get update && sudo apt-get install -y shellcheck
              ;;
            powershell)
              # PowerShell tools
              pwsh -Command "Install-Module -Name PSScriptAnalyzer -Force"
              ;;
            yaml)
              pip install yamllint
              ;;
            dockerfile)
              wget https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64
              chmod +x hadolint-Linux-x86_64
              sudo mv hadolint-Linux-x86_64 /usr/local/bin/hadolint
              ;;
          esac
      - name: Run language-specific scans
        if: steps.check-lang.outputs.detected == 'true'
        run: |
          mkdir -p artifacts
          case "${{ matrix.language }}" in
            python)
              bandit -r . -f sarif -o artifacts/bandit.sarif || true
              pip-audit -r requirements.txt -f json -o artifacts/pip-audit.json || true
              safety check --json --output artifacts/safety.json || true
              ;;
            javascript|typescript)
              npm audit --json > artifacts/npm-audit.json || true
              yarn audit --json > artifacts/yarn-audit.json || true
              ;;
            go)
              gosec -fmt sarif -out artifacts/gosec.sarif ./... || true
              govulncheck ./... > artifacts/govulncheck.txt || true
              ;;
            rust)
              cargo audit --json > artifacts/cargo-audit.json || true
              cargo deny check --format json > artifacts/cargo-deny.json || true
              ;;
            java)
              ./spotbugs/bin/spotbugs -sarif -output artifacts/spotbugs.sarif . || true
              ;;
            csharp)
              security-scan --format sarif --output artifacts/security-scan.sarif . || true
              ;;
            cpp|c)
              cppcheck --enable=all --xml --xml-version=2 . 2> artifacts/cppcheck.xml || true
              flawfinder --csv --output artifacts/flawfinder.csv . || true
              ;;
            php)
              phpcs --standard=Security --report=json --report-file=artifacts/phpcs-security.json . || true
              ;;
            ruby)
              brakeman --format json --output artifacts/brakeman.json . || true
              bundle-audit --format json > artifacts/bundler-audit.json || true
              ;;
            shell)
              find . -name "*.sh" -exec shellcheck -f json {} \; > artifacts/shellcheck.json || true
              ;;
            powershell)
              pwsh -Command "Get-ChildItem -Recurse -Include '*.ps1' | Invoke-ScriptAnalyzer -ReportFormat JSON | ConvertTo-Json" > artifacts/psscriptanalyzer.json || true
              ;;
            yaml)
              yamllint -f json *.yml > artifacts/yamllint.json || true
              ;;
            dockerfile)
              find . -name "Dockerfile*" -exec hadolint {} \; > artifacts/hadolint.txt || true
              ;;
          esac
      - name: Upload language-specific artifacts
        if: steps.check-lang.outputs.detected == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: security-artifacts-${{ matrix.language }}
          path: artifacts

  multi-language-scans:
    name: Multi-Language Security Scans
    runs-on: ubuntu-latest
    needs: language-detection
    if: needs.language-detection.outputs.languages != ''
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install pyyaml
      - name: Install universal tools
        run: |
          # Install all universal tools
          curl -s https://raw.githubusercontent.com/gitleaks/gitleaks/master/install.sh | bash
          sudo mv gitleaks /usr/local/bin/
          curl -sL https://github.com/returntocorp/semgrep/releases/latest/download/semgrep-linux-amd64 -o /usr/local/bin/semgrep
          chmod +x /usr/local/bin/semgrep
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          curl -sL https://github.com/anchore/syft/releases/latest/download/syft_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m).tar.gz | tar -xz
          sudo mv syft /usr/local/bin/
      - name: Run multi-language scans
        run: |
          chmod +x scripts/vuln_audit/run_multi_language_scans.sh
          ./scripts/vuln_audit/run_multi_language_scans.sh
      - name: Upload comprehensive artifacts
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-artifacts
          path: artifacts
